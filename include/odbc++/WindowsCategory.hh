#if !defined(SQL_ODBCXX_WINDOWS_CATEGORY_HH)
#define SQL_ODBCXX_WINDOWS_CATEGORY_HH

#include <windef.h>
#include <errhandlingapi.h>
#include <winerror.h>

#include <type_traits>
#include <string>
#include <system_error>

#include "Exports.h"

namespace odbc
{
    enum class WindowsError: DWORD
    {
	ACCESS_DENIED   	  = ERROR_ACCESS_DENIED,
	ACCOUNT_DISABLED   	  = ERROR_ACCOUNT_DISABLED,
	ACCOUNT_RESTRICTION   	  = ERROR_ACCOUNT_RESTRICTION,
	ACTIVE_CONNECTIONS   	  = ERROR_ACTIVE_CONNECTIONS,
	ALREADY_ASSIGNED   	  = ERROR_ALREADY_ASSIGNED,
	ALREADY_EXISTS   	  = ERROR_ALREADY_EXISTS,
	ARITHMETIC_OVERFLOW   	  = ERROR_ARITHMETIC_OVERFLOW,
	BAD_COMMAND   		  = ERROR_BAD_COMMAND,
	BAD_DEVICE   		  = ERROR_BAD_DEVICE,
	BAD_DRIVER_LEVEL   	  = ERROR_BAD_DRIVER_LEVEL,
	BAD_EXE_FORMAT   	  = ERROR_BAD_EXE_FORMAT,
	BAD_FORMAT   		  = ERROR_BAD_FORMAT,
	BAD_LENGTH   		  = ERROR_BAD_LENGTH,
	BAD_NETPATH   		  = ERROR_BAD_NETPATH,
	BAD_NET_NAME   		  = ERROR_BAD_NET_NAME,
	BAD_NET_RESP   		  = ERROR_BAD_NET_RESP,
	BAD_PATHNAME   		  = ERROR_BAD_PATHNAME,
	BAD_PIPE   		  = ERROR_BAD_PIPE,
	BAD_UNIT   		  = ERROR_BAD_UNIT,
	BAD_USERNAME   		  = ERROR_BAD_USERNAME,
	BEGINNING_OF_MEDIA   	  = ERROR_BEGINNING_OF_MEDIA,
	BROKEN_PIPE   		  = ERROR_BROKEN_PIPE,
	BUFFER_OVERFLOW   	  = ERROR_BUFFER_OVERFLOW,
	BUSY   			  = ERROR_BUSY,
	BUSY_DRIVE   		  = ERROR_BUSY_DRIVE,
	BUS_RESET   		  = ERROR_BUS_RESET,
	CALL_NOT_IMPLEMENTED   	  = ERROR_CALL_NOT_IMPLEMENTED,
	CANCELLED   		  = ERROR_CANCELLED,
	CANNOT_MAKE   		  = ERROR_CANNOT_MAKE,
	CANTOPEN   		  = ERROR_CANTOPEN,
	CANTREAD   		  = ERROR_CANTREAD,
	CANTWRITE   		  = ERROR_CANTWRITE,
	CHILD_NOT_COMPLETE   	  = ERROR_CHILD_NOT_COMPLETE,
	COMMITMENT_LIMIT   	  = ERROR_COMMITMENT_LIMIT,
	CONNECTION_REFUSED   	  = ERROR_CONNECTION_REFUSED,
	CRC   			  = ERROR_CRC,
	CURRENT_DIRECTORY   	  = ERROR_CURRENT_DIRECTORY,
	DEVICE_DOOR_OPEN   	  = ERROR_DEVICE_DOOR_OPEN,
	DEVICE_IN_USE   	  = ERROR_DEVICE_IN_USE,
	DEVICE_REQUIRES_CLEANING  = ERROR_DEVICE_REQUIRES_CLEANING,
	DEV_NOT_EXIST   	  = ERROR_DEV_NOT_EXIST,
	DIRECTORY   		  = ERROR_DIRECTORY,
	DIR_NOT_EMPTY   	  = ERROR_DIR_NOT_EMPTY,
	DISK_CHANGE   		  = ERROR_DISK_CHANGE,
	DISK_CORRUPT   		  = ERROR_DISK_CORRUPT,
	DISK_FULL   		  = ERROR_DISK_FULL,
	DRIVE_LOCKED   		  = ERROR_DRIVE_LOCKED,
	DS_GENERIC_ERROR   	  = ERROR_DS_GENERIC_ERROR,
	DUP_NAME   		  = ERROR_DUP_NAME,
	EAS_DIDNT_FIT   	  = ERROR_EAS_DIDNT_FIT,
	EAS_NOT_SUPPORTED   	  = ERROR_EAS_NOT_SUPPORTED,
	EA_LIST_INCONSISTENT   	  = ERROR_EA_LIST_INCONSISTENT,
	EA_TABLE_FULL   	  = ERROR_EA_TABLE_FULL,
	END_OF_MEDIA   		  = ERROR_END_OF_MEDIA,
	ENVVAR_NOT_FOUND   	  = ERROR_ENVVAR_NOT_FOUND,
	EOM_OVERFLOW   		  = ERROR_EOM_OVERFLOW,
	EXE_MACHINE_TYPE_MISMATCH = ERROR_EXE_MACHINE_TYPE_MISMATCH,
	EXE_MARKED_INVALID   	  = ERROR_EXE_MARKED_INVALID,
	FILEMARK_DETECTED   	  = ERROR_FILEMARK_DETECTED,
	FILENAME_EXCED_RANGE   	  = ERROR_FILENAME_EXCED_RANGE,
	FILE_CORRUPT   		  = ERROR_FILE_CORRUPT,
	FILE_EXISTS   		  = ERROR_FILE_EXISTS,
	FILE_INVALID   		  = ERROR_FILE_INVALID,
	FILE_NOT_FOUND   	  = ERROR_FILE_NOT_FOUND,
	GEN_FAILURE   		  = ERROR_GEN_FAILURE,
	HANDLE_DISK_FULL   	  = ERROR_HANDLE_DISK_FULL,
	HANDLE_EOF   		  = ERROR_HANDLE_EOF,
	INSUFFICIENT_BUFFER   	  = ERROR_INSUFFICIENT_BUFFER,
	INVALID_ACCESS   	  = ERROR_INVALID_ACCESS,
	INVALID_ADDRESS   	  = ERROR_INVALID_ADDRESS,
	INVALID_AT_INTERRUPT_TIME = ERROR_INVALID_AT_INTERRUPT_TIME,
	INVALID_BLOCK   	  = ERROR_INVALID_BLOCK,
	INVALID_BLOCK_LENGTH   	  = ERROR_INVALID_BLOCK_LENGTH,
	INVALID_DATA   		  = ERROR_INVALID_DATA,
	INVALID_DRIVE   	  = ERROR_INVALID_DRIVE,
	INVALID_EA_NAME   	  = ERROR_INVALID_EA_NAME,
	INVALID_EXE_SIGNATURE  	  = ERROR_INVALID_EXE_SIGNATURE,
	INVALID_FLAGS   	  = ERROR_INVALID_FLAGS,
	INVALID_FUNCTION   	  = ERROR_INVALID_FUNCTION,
	INVALID_HANDLE   	  = ERROR_INVALID_HANDLE,
	INVALID_LOGON_HOURS   	  = ERROR_INVALID_LOGON_HOURS,
	INVALID_NAME   		  = ERROR_INVALID_NAME,
	INVALID_OWNER   	  = ERROR_INVALID_OWNER,
	INVALID_PARAMETER   	  = ERROR_INVALID_PARAMETER,
	INVALID_PASSWORD   	  = ERROR_INVALID_PASSWORD,
	INVALID_PRIMARY_GROUP  	  = ERROR_INVALID_PRIMARY_GROUP,
	INVALID_SIGNAL_NUMBER  	  = ERROR_INVALID_SIGNAL_NUMBER,
	INVALID_TARGET_HANDLE  	  = ERROR_INVALID_TARGET_HANDLE,
	INVALID_WORKSTATION   	  = ERROR_INVALID_WORKSTATION,
	IOPL_NOT_ENABLED   	  = ERROR_IOPL_NOT_ENABLED,
	IO_DEVICE   		  = ERROR_IO_DEVICE,
	IO_INCOMPLETE   	  = ERROR_IO_INCOMPLETE,
	IO_PENDING   		  = ERROR_IO_PENDING,
	LOCKED   		  = ERROR_LOCKED,
	LOCK_VIOLATION   	  = ERROR_LOCK_VIOLATION,
	LOGON_FAILURE   	  = ERROR_LOGON_FAILURE,
	MAPPED_ALIGNMENT   	  = ERROR_MAPPED_ALIGNMENT,
	MAX_THRDS_REACHED   	  = ERROR_MAX_THRDS_REACHED,
	META_EXPANSION_TOO_LONG   = ERROR_META_EXPANSION_TOO_LONG,
	MOD_NOT_FOUND   	  = ERROR_MOD_NOT_FOUND,
	MORE_DATA   		  = ERROR_MORE_DATA,
	NEGATIVE_SEEK   	  = ERROR_NEGATIVE_SEEK,
	NETNAME_DELETED   	  = ERROR_NETNAME_DELETED,
	NOACCESS   		  = ERROR_NOACCESS,
	NONE_MAPPED   		  = ERROR_NONE_MAPPED,
	NONPAGED_SYSTEM_RESOURCES = ERROR_NONPAGED_SYSTEM_RESOURCES,
	NOT_CONNECTED   	  = ERROR_NOT_CONNECTED,
	NOT_ENOUGH_MEMORY   	  = ERROR_NOT_ENOUGH_MEMORY,
	NOT_ENOUGH_QUOTA   	  = ERROR_NOT_ENOUGH_QUOTA,
	NOT_OWNER   		  = ERROR_NOT_OWNER,
	NOT_READY   		  = ERROR_NOT_READY,
	NOT_SAME_DEVICE   	  = ERROR_NOT_SAME_DEVICE,
	NOT_SUPPORTED   	  = ERROR_NOT_SUPPORTED,
	NO_DATA_   		  = ERROR_NO_DATA,
	NO_DATA_DETECTED   	  = ERROR_NO_DATA_DETECTED,
	NO_MEDIA_IN_DRIVE   	  = ERROR_NO_MEDIA_IN_DRIVE,
	NO_MORE_FILES   	  = ERROR_NO_MORE_FILES,
	NO_MORE_SEARCH_HANDLES    = ERROR_NO_MORE_SEARCH_HANDLES,
	NO_PROC_SLOTS   	  = ERROR_NO_PROC_SLOTS,
	NO_SIGNAL_SENT   	  = ERROR_NO_SIGNAL_SENT,
	NO_SUCH_PRIVILEGE   	  = ERROR_NO_SUCH_PRIVILEGE,
	NO_SYSTEM_RESOURCES   	  = ERROR_NO_SYSTEM_RESOURCES,
	NO_TOKEN   		  = ERROR_NO_TOKEN,
	OPEN_FAILED   		  = ERROR_OPEN_FAILED,
	OPEN_FILES   		  = ERROR_OPEN_FILES,
	OPERATION_ABORTED   	  = ERROR_OPERATION_ABORTED,
	OUTOFMEMORY   		  = ERROR_OUTOFMEMORY,
	PAGED_SYSTEM_RESOURCES    = ERROR_PAGED_SYSTEM_RESOURCES,
	PAGEFILE_QUOTA   	  = ERROR_PAGEFILE_QUOTA,
	PASSWORD_EXPIRED   	  = ERROR_PASSWORD_EXPIRED,
	PATH_BUSY   		  = ERROR_PATH_BUSY,
	PATH_NOT_FOUND   	  = ERROR_PATH_NOT_FOUND,
	PIPE_BUSY   		  = ERROR_PIPE_BUSY,
	PIPE_CONNECTED   	  = ERROR_PIPE_CONNECTED,
	PIPE_LISTENING   	  = ERROR_PIPE_LISTENING,
	PIPE_NOT_CONNECTED   	  = ERROR_PIPE_NOT_CONNECTED,
	POSSIBLE_DEADLOCK   	  = ERROR_POSSIBLE_DEADLOCK,
	PRIVILEGE_NOT_HELD   	  = ERROR_PRIVILEGE_NOT_HELD,
	PROCESS_ABORTED   	  = ERROR_PROCESS_ABORTED,
	PROC_NOT_FOUND   	  = ERROR_PROC_NOT_FOUND,
	READ_FAULT   		  = ERROR_READ_FAULT,
	REM_NOT_LIST   		  = ERROR_REM_NOT_LIST,
	SECTOR_NOT_FOUND   	  = ERROR_SECTOR_NOT_FOUND,
	SEEK   			  = ERROR_SEEK,
	SEEK_ON_DEVICE   	  = ERROR_SEEK_ON_DEVICE,
	SERVICE_REQUEST_TIMEOUT   = ERROR_SERVICE_REQUEST_TIMEOUT,
	SETMARK_DETECTED   	  = ERROR_SETMARK_DETECTED,
	SHARING_BUFFER_EXCEEDED   = ERROR_SHARING_BUFFER_EXCEEDED,
	SHARING_VIOLATION   	  = ERROR_SHARING_VIOLATION,
	SIGNAL_PENDING   	  = ERROR_SIGNAL_PENDING,
	SIGNAL_REFUSED   	  = ERROR_SIGNAL_REFUSED,
	STACK_OVERFLOW   	  = ERROR_STACK_OVERFLOW,
	SWAPERROR   		  = ERROR_SWAPERROR,
	SXS_CANT_GEN_ACTCTX   	  = ERROR_SXS_CANT_GEN_ACTCTX,
	THREAD_1_INACTIVE   	  = ERROR_THREAD_1_INACTIVE,
	TIMEOUT   		  = ERROR_TIMEOUT,
	TOO_MANY_LINKS   	  = ERROR_TOO_MANY_LINKS,
	TOO_MANY_MODULES   	  = ERROR_TOO_MANY_MODULES,
	TOO_MANY_OPEN_FILES   	  = ERROR_TOO_MANY_OPEN_FILES,
	UNEXP_NET_ERR   	  = ERROR_UNEXP_NET_ERR,
	UNRECOGNIZED_MEDIA   	  = ERROR_UNRECOGNIZED_MEDIA,
	UNRECOGNIZED_VOLUME   	  = ERROR_UNRECOGNIZED_VOLUME,
	WAIT_NO_CHILDREN   	  = ERROR_WAIT_NO_CHILDREN,
	WORKING_SET_QUOTA   	  = ERROR_WORKING_SET_QUOTA,
	WRITE_FAULT   		  = ERROR_WRITE_FAULT,
	WRITE_PROTECT   	  = ERROR_WRITE_PROTECT
    };

    std::underlying_type<WindowsError>::type operator +(WindowsError err);
    WindowsError windows_error(DWORD dwLastError = ::GetLastError());
    std::error_code windows_error_code(DWORD dwLastError = ::GetLastError());
    std::error_code make_error_code(odbc::WindowsError);

    ODBCXX_EXPORT class ODBCXX_EXPORT WindowsCategory: public std::error_category
    {
    public:
	virtual char const *name() const noexcept override;
	virtual std::error_condition default_error_condition(int ev) const noexcept override;
	virtual bool equivalent(int code, std::error_condition const &condition) const noexcept;
	// virtual bool equivalent(std::error_code const &code, int condition) const noexcept;
	virtual std::string message(int ev) const override;
    }
	const &windows_category();
}

namespace std
{
    template <>
	struct is_error_code_enum<odbc::WindowsError>: true_type
    {
    };
}

inline std::error_code odbc::make_error_code(odbc::WindowsError dwLastError)
{
    return std::error_code(static_cast<int>(dwLastError), odbc::windows_category());
}

inline char const *odbc::WindowsCategory::name() const noexcept
{
    return "Windows";
}

inline bool odbc::WindowsCategory::equivalent(int code, std::error_condition const &condition) const noexcept
{
    return std::error_condition(code, windows_category()) == condition || default_error_condition(code) == condition;
}

inline std::underlying_type<odbc::WindowsError>::type  odbc::operator +(WindowsError err)
{
    return static_cast<std::underlying_type<odbc::WindowsError>::type>(err);
}

inline odbc::WindowsError odbc::windows_error(DWORD dwLastError)
{
    return static_cast<WindowsError>(dwLastError);
}

inline std::error_code odbc::windows_error_code(DWORD dwLastError)
{
    return make_error_code(windows_error(dwLastError));
}

#endif	    // !defined(SQL_ODBCXX_WINDOWS_CATEGORY_HH)
